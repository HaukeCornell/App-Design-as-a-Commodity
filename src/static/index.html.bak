<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vibe Coder Prototype</title>
    <style>
        body { 
            font-family: sans-serif; 
            padding: 20px; 
            max-width: 900px;
            margin: 0 auto;
            height: 100%;
            overflow-y: auto;
        }
        
        label { 
            display: block; 
            margin-top: 10px; 
        }
        
        input[type="text"], input[type="number"] { 
            width: 300px; 
            padding: 8px; 
            margin-top: 5px; 
        }
        
        button { 
            padding: 10px 15px; 
            margin-top: 15px; 
            cursor: pointer; 
            background-color: #4CAF50;
            border: none;
            color: white;
            border-radius: 4px;
        }
        
        button:hover {
            background-color: #45a049;
        }
        
        #result-area { 
            margin-top: 20px; 
        }
        
        #qr-code img { 
            border: 1px solid #ccc; 
            display: block; 
            margin-bottom: 10px; 
            max-width: 200px;
        }
        
        #app-url { 
            margin-top: 5px; 
            word-wrap: break-word; 
        }
        
        #status { 
            margin-top: 15px; 
            font-style: italic; 
            color: #555; 
        }
        
        .toggle-container {
            margin-top: 30px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f9f9f9;
        }
        
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #2196F3;
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .email-status {
            display: inline-block;
            margin-left: 15px;
            font-weight: bold;
        }
        
        /* Receipt styling */
        .receipt-paper {
            background-color: #fff;
            border: 1px solid #ddd;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            font-family: 'Courier New', monospace;
            max-width: 300px;
            margin: 20px auto;
            padding: 20px;
            position: relative;
        }
        
        .receipt-paper::before {
            content: "";
            position: absolute;
            bottom: -5px;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(45deg, #fff 25%, transparent 25%),
                        linear-gradient(-45deg, #fff 25%, transparent 25%);
            background-size: 10px 10px;
        }
        
        .receipt-header {
            text-align: center;
            border-bottom: 1px dashed #000;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
        
        .receipt-item {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
        }
        
        .receipt-footer {
            text-align: center;
            border-top: 1px dashed #000;
            margin-top: 15px;
            padding-top: 10px;
            font-size: 12px;
        }
        
        .payment-log {
            margin-top: 15px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f0fff0;
            display: none;
        }
        
        /* Dot matrix printer effects */
        @keyframes printing {
            from { 
                height: 0; 
                opacity: 0.7;
            }
            to { 
                height: 100%; 
                opacity: 1;
            }
        }
        
        @keyframes printer-sound {
            0%, 100% { transform: translateY(0); }
            10% { transform: translateY(-1px); }
            20% { transform: translateY(1px); }
            30% { transform: translateY(-1px); }
            40% { transform: translateY(1px); }
            50% { transform: translateY(0); }
        }
        
        .printing {
            animation: printing 2s linear, printer-sound 0.5s steps(10) 4;
            overflow: hidden;
            position: relative;
        }
        
        /* Printer line scanning effect */
        .printing::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background-color: rgba(0, 0, 255, 0.2);
            animation: scan-line 2s linear;
            animation-fill-mode: forwards;
            z-index: 100;
        }
        
        @keyframes scan-line {
            from { top: 0; }
            to { top: 100%; }
        }
        
        .log-area {
            height: 120px;
            overflow-y: auto;
            margin-top: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f5f5f5;
            font-family: monospace;
            font-size: 12px;
        }
        
        .tabs {
            display: flex;
            margin-top: 20px;
            border-bottom: 1px solid #ddd;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #f1f1f1;
            margin-right: 5px;
            border-radius: 4px 4px 0 0;
            border: 1px solid #ddd;
            border-bottom: none;
        }
        
        .tab.active {
            background-color: white;
            font-weight: bold;
        }
        
        .tab-content {
            padding: 20px;
            border: 1px solid #ddd;
            border-top: none;
            display: none;
            height: auto;
            overflow-y: visible;
        }
    </style>
</head>
<body>
    <h1>Vibe Coder Prototype</h1>
    
    <div class="tabs">
        <div class="tab active" data-tab="manual">Manual Generation</div>
        <div class="tab" data-tab="venmo">Venmo Email Monitor</div>
    </div>
    
    <div id="manual-tab" class="tab-content" style="display: block;">
        <p>Simulate a payment to generate a custom web app using Gemini and push it to GitHub.</p>
        
        <form id="payment-form">
            <label for="app_type">What app do you need?</label>
            <input type="text" id="app_type" name="app_type" placeholder="e.g., Simple Calculator, Basic Timer, Coffee Shop Landing Page" required>
    
            <label for="amount">Simulated Payment Amount (USD):</label>
            <input type="number" id="amount" name="amount" min="0.25" step="0.25" placeholder="e.g., 0.25 (Low Tier) or 2.00 (High Tier)" required>
    
            <button type="submit">Generate App</button>
        </form>
    
        <div id="status"></div>
        <div id="result-area">
            <div id="qr-code"></div>
            <div id="app-url"></div>
        </div>
    </div>
    
    <div id="venmo-tab" class="tab-content">
        <h2 style="text-align: center;">App Design as a Commodity</h2>
        
        <div class="receipt-paper" id="instructions-receipt">
            <div class="receipt-header">
                <h3>VIBE CODER</h3>
                <p>Interactive Art Installation</p>
                <p id="receipt-date"></p>
            </div>
            
            <div class="receipt-item">
                <span>ITEM:</span>
                <span>CUSTOM APP DEVELOPMENT</span>
            </div>
            
            <div class="receipt-body" style="margin: 15px 0;">
                <p>In the Venmo description, describe the app you want to have:</p>
                <ul style="list-style-type: none; padding-left: 10px;">
                    <li>- Pay $0.25 for a quick app</li>
                    <li>- Pay $1.00 for a high quality app</li>
                </ul>
                <p>Your app will be automatically generated after payment is detected.</p>
            </div>
            
            <div id="venmo-qr-container" style="text-align: center; margin: 15px 0;"></div>
            
            <div class="receipt-footer">
                <p>Scan to pay via Venmo</p>
                <p>Thank you for participating</p>
                <p>www.hauke.space</p>
            </div>
        </div>
        
        <div class="toggle-container" style="max-width: 300px; margin: 20px auto;">
            <h3>Email Monitoring</h3>
            <label class="toggle-switch">
                <input type="checkbox" id="monitor-toggle">
                <span class="slider"></span>
            </label>
            <div class="email-status">Status: <span id="monitor-status">Inactive</span></div>
            
            <div style="margin-top: 15px; text-align: center;">
                <button id="check-now-btn">Check Emails Now</button>
            </div>
        </div>
        
        <!-- Payment Receipt (displays when payment is detected) -->
        <div class="receipt-paper printing" id="payment-receipt" style="display: none;">
            <div class="receipt-header">
                <h3>PAYMENT RECEIVED</h3>
                <p id="payment-timestamp"></p>
            </div>
            
            <div id="payment-details-receipt">
                <!-- Payment details will be inserted here -->
            </div>
            
            <div class="receipt-footer">
                <p>Generating Your Custom App...</p>
                <button id="generate-from-payment-btn" style="display: none; margin-top: 10px;">Generate App Now</button>
            </div>
        </div>
        
        <div class="log-area" id="email-log" style="margin-top: 20px; max-width: 500px; margin: 20px auto;">
            <!-- Email monitoring logs will be displayed here -->
        </div>
    </div>

    <script>
        // Initialize the page - ensure this runs immediately
        window.onload = function() {
            console.log("Initializing tabs");
            // Show manual tab by default
            switchTab('manual');
            // Check email status
            checkEmailStatus();
            
            // Trigger tab switch once more to ensure it's properly displayed
            setTimeout(() => {
                console.log("Final tab refresh");
                switchTab('manual');
            }, 500);
        };
        
        // Simple tab switching functionality
        function switchTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.style.display = 'none';
            });
            
            // Show selected tab
            const selectedTab = document.getElementById(tabName + '-tab');
            if (selectedTab) {
                selectedTab.style.display = 'block';
            }
            
            // Update tab buttons
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Highlight active tab button
            const activeTab = document.querySelector(`.tab[data-tab="${tabName}"]`);
            if (activeTab) {
                activeTab.classList.add('active');
            }
        }
        
        // Set up tab click events
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.getAttribute('data-tab');
                switchTab(tabName);
            });
        });
        
        // Manual app generation form
        const form = document.getElementById("payment-form");
        const statusDiv = document.getElementById("status");
        const qrCodeDiv = document.getElementById("qr-code");
        const appUrlDiv = document.getElementById("app-url");

        form.addEventListener("submit", async (event) => {
            event.preventDefault();
            statusDiv.textContent = "Generating app via LLM and pushing to GitHub... Please wait (this may take a minute).";
            qrCodeDiv.innerHTML = ""; // Clear previous QR code
            appUrlDiv.innerHTML = ""; // Clear previous URL

            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch("/generate", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                const result = await response.json(); // Always try to parse JSON

                if (!response.ok) {
                    throw new Error(result.error || `App generation failed with status ${response.status}.`);
                }

                statusDiv.textContent = `${result.message} GitHub: ${result.github_url}`; 

                // Display QR code
                if (result.qr_code_image) {
                   const img = document.createElement("img");
                   img.src = `data:image/png;base64,${result.qr_code_image}`;
                   img.alt = "QR Code for Generated App";
                   qrCodeDiv.appendChild(img);
                } else {
                    qrCodeDiv.textContent = "(QR code image not available)";
                }

                // Display Full URL
                if (result.hosted_url_full) {
                    const urlLink = document.createElement("a");
                    urlLink.href = result.hosted_url_full; // Use full URL for link
                    urlLink.textContent = result.hosted_url_full;
                    urlLink.target = "_blank"; // Open in new tab
                    appUrlDiv.appendChild(document.createTextNode("Access URL: "));
                    appUrlDiv.appendChild(urlLink);
                } else {
                    appUrlDiv.textContent = "(App URL not available)";
                }
                
                // Create a receipt for the manual generation too
                // Switch to Venmo tab
                setTimeout(() => {
                    switchTab('venmo');
                    
                    // Create the receipt element if it doesn't exist
                    const generatedReceiptExists = document.getElementById('generated-app-receipt');
                    if (!generatedReceiptExists) {
                        // Create the receipt element
                        const generatedReceipt = document.createElement('div');
                        generatedReceipt.id = 'generated-app-receipt';
                        generatedReceipt.className = 'receipt-paper printing';
                        generatedReceipt.style.marginTop = '20px';
                        
                        // Structure the receipt content
                        generatedReceipt.innerHTML = `
                            <div class="receipt-header">
                                <h3>APP GENERATED!</h3>
                                <p>Thank you for your order</p>
                                <p>${new Date().toLocaleString()}</p>
                            </div>
                            
                            <div class="receipt-item">
                                <span>APP TYPE:</span>
                                <span style="max-width: 170px; overflow-wrap: break-word;">${result.app_type_received}</span>
                            </div>
                            
                            <div class="receipt-item">
                                <span>TIER:</span>
                                <span>${result.amount_received >= 1.00 ? 'HIGH QUALITY' : 'QUICK APP'}</span>
                            </div>
                            
                            <div style="text-align: center; margin: 15px 0;">
                                <div id="manual-generated-app-qr"></div>
                                <p style="margin-top: 10px; font-size: 12px;">Scan to view your app</p>
                            </div>
                            
                            <div class="receipt-item">
                                <span>GITHUB:</span>
                                <span style="font-size: 12px; max-width: 170px; overflow-wrap: break-word; word-break: break-all;">${result.github_url}</span>
                            </div>
                            
                            <div class="receipt-item" style="background-color: #e6f7ff; padding: 5px; border-radius: 4px; margin: 8px 0;">
                                <span style="font-weight: bold;">URL:</span>
                                <span style="font-size: 12px; max-width: 170px; overflow-wrap: break-word; word-break: break-all; font-weight: bold;">${result.hosted_url_full}</span>
                            </div>
                            
                            <div style="margin-top: 15px; word-break: break-all; text-align: center;">
                                <div><a href="${result.github_url}" target="_blank" style="color: #0066cc; text-decoration: underline; font-weight: bold; font-size: 14px; background-color: #f0f0f0; padding: 5px; border-radius: 4px; display: inline-block;">VIEW SOURCE CODE</a></div>
                                <div style="margin-top: 10px;"><a href="${result.hosted_url_full}" target="_blank" style="color: #0066cc; text-decoration: underline; font-weight: bold; font-size: 16px; background-color: #e6f7ff; padding: 8px; border-radius: 4px; border: 1px solid #0066cc; display: inline-block;">OPEN GENERATED APP</a></div>
                            </div>
                            
                            <div class="receipt-footer">
                                <p>Made with ♥ by Vibe Coder</p>
                                <p>App Design as a Commodity</p>
                                <p>Interactive Art Installation</p>
                            </div>
                        `;
                        
                        // Append the receipt at the bottom after the log area
                        const venmoTab = document.getElementById('venmo-tab');
                        venmoTab.appendChild(generatedReceipt);
                        
                        // Add the QR code to the receipt
                        if (result.qr_code_image) {
                            const qrDiv = document.getElementById('manual-generated-app-qr');
                            const img = document.createElement("img");
                            img.src = `data:image/png;base64,${result.qr_code_image}`;
                            img.alt = "QR Code for Generated App";
                            img.style.maxWidth = "150px";
                            img.style.margin = "0 auto";
                            img.style.display = "block";
                            qrDiv.appendChild(img);
                        }
                        
                        // Play a printer sound effect if available
                        try {
                            const audio = new Audio('/static/printer.mp3');
                            audio.play().catch(e => console.log('Sound not available'));
                        } catch (e) {
                            // Sound not critical, just continue silently
                        }
                        
                        // Scroll the venmo tab to the bottom to ensure the receipt is visible
                        const venmoTab = document.getElementById('venmo-tab');
                        venmoTab.scrollTop = venmoTab.scrollHeight;
                    }
                }, 500);

            } catch (error) {
                statusDiv.textContent = `Error: ${error.message}`;
                console.error("Error:", error);
            }
        });
        
        // Email monitoring functionality
        const monitorToggle = document.getElementById("monitor-toggle");
        const monitorStatus = document.getElementById("monitor-status");
        const checkNowBtn = document.getElementById("check-now-btn");
        const emailLog = document.getElementById("email-log");
        const paymentInfo = document.getElementById("payment-info");
        const paymentDetails = document.getElementById("payment-details");
        const generateFromPaymentBtn = document.getElementById("generate-from-payment-btn");
        
        let lastPayment = null;
        
        // Initialize receipt date
        document.getElementById("receipt-date").textContent = new Date().toLocaleDateString();
        
        // Check initial status on page load
        checkEmailStatus();
        
        // Function to update the Venmo QR code display
        function updateVenmoQRCode(qrCodeBase64, profileUrl) {
            const venmoQRContainer = document.getElementById("venmo-qr-container");
            
            // Update the QR code image
            if (qrCodeBase64) {
                venmoQRContainer.innerHTML = "";
                const img = document.createElement("img");
                img.src = `data:image/png;base64,${qrCodeBase64}`;
                img.alt = "Venmo QR Code";
                img.style.maxWidth = "200px";
                img.style.border = "1px solid #ccc";
                venmoQRContainer.appendChild(img);
                
                // Add a link below the QR code that also notifies our server
                const link = document.createElement("div");
                link.innerHTML = `<a href="${profileUrl}" target="_blank" onclick="notifyQRScanned(event)">Or click here to open Venmo</a>`;
                link.style.marginTop = "10px";
                link.style.fontSize = "12px";
                venmoQRContainer.appendChild(link);
                
                // Make the QR code image also trigger the notification
                img.onclick = notifyQRScanned;
            }
        }
        
        // Toggle email monitoring
        monitorToggle.addEventListener("change", async () => {
            try {
                const enabled = monitorToggle.checked;
                
                const response = await fetch("/api/email-monitor", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ enabled }),
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || `Failed to ${enabled ? 'start' : 'stop'} email monitoring.`);
                }
                
                monitorStatus.textContent = enabled ? "Active" : "Inactive";
                addLog(`Email monitoring ${enabled ? 'started' : 'stopped'}`);
                
                // Start checking for status updates if monitoring is enabled
                if (enabled) {
                    startStatusUpdates();
                }
                
            } catch (error) {
                addLog(`Error: ${error.message}`, 'error');
                console.error("Error:", error);
                monitorToggle.checked = !monitorToggle.checked; // Revert toggle state
            }
        });
        
        // Check for emails now button
        checkNowBtn.addEventListener("click", async () => {
            try {
                addLog("Checking for new emails...");
                
                const response = await fetch("/api/check-emails", {
                    method: "POST",
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || "Failed to check emails.");
                }
                
                addLog(`Email check completed. Found ${result.payments_found} new payment(s).`);
                
                // Refresh status immediately to see if we got any payments
                checkEmailStatus();
                
            } catch (error) {
                addLog(`Error: ${error.message}`, 'error');
                console.error("Error:", error);
            }
        });
        
        // Generate app from payment button
        generateFromPaymentBtn.addEventListener("click", async () => {
            if (!lastPayment) {
                addLog("No payment data available", 'error');
                return;
            }
            
            try {
                addLog(`Generating app from payment: ${lastPayment.note} ($${lastPayment.amount})`);
                
                const response = await fetch("/generate", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        app_type: lastPayment.note,
                        amount: lastPayment.amount
                    }),
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || "App generation failed.");
                }
                
                // Display generation result
                addLog(`App generated successfully! App ID: ${result.app_type_received}`);
                
                // Switch to manual tab to show the results
                switchTab('manual');
                
                // Update the status and results in the manual tab
                statusDiv.textContent = `${result.message} GitHub: ${result.github_url}`;
                
                // Display QR code
                qrCodeDiv.innerHTML = '';
                if (result.qr_code_image) {
                   const img = document.createElement("img");
                   img.src = `data:image/png;base64,${result.qr_code_image}`;
                   img.alt = "QR Code for Generated App";
                   qrCodeDiv.appendChild(img);
                }
                
                // Display URL
                appUrlDiv.innerHTML = '';
                if (result.hosted_url_full) {
                    const urlLink = document.createElement("a");
                    urlLink.href = result.hosted_url_full;
                    urlLink.textContent = result.hosted_url_full;
                    urlLink.target = "_blank";
                    appUrlDiv.appendChild(document.createTextNode("Access URL: "));
                    appUrlDiv.appendChild(urlLink);
                }
                
            } catch (error) {
                addLog(`Error: ${error.message}`, 'error');
                console.error("Error:", error);
            }
        });
        
        // Check current email monitoring status
        async function checkEmailStatus() {
            try {
                const response = await fetch("/api/email-status");
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error("Failed to get email status.");
                }
                
                const isActive = result.email_monitoring;
                monitorToggle.checked = isActive;
                monitorStatus.textContent = isActive ? "Active" : "Inactive";
                
                // Update Venmo QR code display
                if (result.venmo_qr_code && result.venmo_profile_url) {
                    updateVenmoQRCode(result.venmo_qr_code, result.venmo_profile_url);
                    
                    if (isActive) {
                        addLog("Email monitoring active. QR code ready for payments.");
                    }
                }
                
                // Update last payment info if available
                if (result.last_payment) {
                    lastPayment = result.last_payment;
                    
                    // Show the payment receipt
                    const paymentReceipt = document.getElementById("payment-receipt");
                    paymentReceipt.style.display = "block";
                    paymentReceipt.classList.add("printing");
                    
                    // Show generate button
                    generateFromPaymentBtn.style.display = "block";
                    
                    // Format timestamp for the receipt
                    const timestamp = new Date(lastPayment.timestamp * 1000);
                    document.getElementById("payment-timestamp").textContent = timestamp.toLocaleString();
                    
                    // Format the payment details in receipt format
                    const paymentDetailsReceipt = document.getElementById("payment-details-receipt");
                    paymentDetailsReceipt.innerHTML = `
                        <div class="receipt-item">
                            <span>FROM:</span>
                            <span>${lastPayment.sender || 'Anonymous'}</span>
                        </div>
                        <div class="receipt-item">
                            <span>AMOUNT:</span>
                            <span>$${lastPayment.amount.toFixed(2)}</span>
                        </div>
                        <div class="receipt-item">
                            <span>APP TYPE:</span>
                            <span style="max-width: 170px; overflow-wrap: break-word;">${lastPayment.note}</span>
                        </div>
                        <div class="receipt-item">
                            <span>TIER:</span>
                            <span>${lastPayment.amount >= 1.00 ? 'HIGH QUALITY' : 'QUICK APP'}</span>
                        </div>
                    `;
                    
                    addLog(`Payment received: $${lastPayment.amount} for "${lastPayment.note}"`);
                }
                
                // If we have a last generated app (from automatic processing), show it
                if (result.last_generated_app) {
                    const app = result.last_generated_app;
                    // Check if this is a recent app (generated in the last 60 seconds)
                    const isRecent = (Date.now() / 1000) - app.timestamp < 60;
                    
                    if (isRecent) {
                        // Create and display the final receipt with app details
                        const generatedReceiptExists = document.getElementById('generated-app-receipt');
                        if (!generatedReceiptExists) {
                            // Create the receipt element
                            const generatedReceipt = document.createElement('div');
                            generatedReceipt.id = 'generated-app-receipt';
                            generatedReceipt.className = 'receipt-paper printing';
                            generatedReceipt.style.marginTop = '20px';
                            
                            // Structure the receipt content
                            generatedReceipt.innerHTML = `
                                <div class="receipt-header">
                                    <h3>APP GENERATED!</h3>
                                    <p>Thank you for your order</p>
                                    <p>${new Date(app.timestamp * 1000).toLocaleString()}</p>
                                </div>
                                
                                <div class="receipt-item">
                                    <span>APP TYPE:</span>
                                    <span style="max-width: 170px; overflow-wrap: break-word;">${app.app_type}</span>
                                </div>
                                
                                <div class="receipt-item">
                                    <span>TIER:</span>
                                    <span>${app.tier}</span>
                                </div>
                                
                                <div style="text-align: center; margin: 15px 0;">
                                    <div id="generated-app-qr"></div>
                                    <p style="margin-top: 10px; font-size: 12px;">Scan to view your app</p>
                                </div>
                                
                                <div class="receipt-item">
                                    <span>GITHUB:</span>
                                    <span style="font-size: 12px; max-width: 170px; overflow-wrap: break-word; word-break: break-all;">${app.github_url}</span>
                                </div>
                                
                                <div class="receipt-item" style="background-color: #e6f7ff; padding: 5px; border-radius: 4px; margin: 8px 0;">
                                    <span style="font-weight: bold;">URL:</span>
                                    <span style="font-size: 12px; max-width: 170px; overflow-wrap: break-word; word-break: break-all; font-weight: bold;">${app.hosted_url_full}</span>
                                </div>
                                
                                <div style="margin-top: 15px; word-break: break-all; text-align: center;">
                                    <div><a href="${app.github_url}" target="_blank" style="color: #0066cc; text-decoration: underline; font-weight: bold; font-size: 14px; background-color: #f0f0f0; padding: 5px; border-radius: 4px; display: inline-block;">VIEW SOURCE CODE</a></div>
                                    <div style="margin-top: 10px;"><a href="${app.hosted_url_full}" target="_blank" style="color: #0066cc; text-decoration: underline; font-weight: bold; font-size: 16px; background-color: #e6f7ff; padding: 8px; border-radius: 4px; border: 1px solid #0066cc; display: inline-block;">OPEN GENERATED APP</a></div>
                                </div>
                                
                                <div class="receipt-footer">
                                    <p>Made with ♥ by Vibe Coder</p>
                                    <p>App Design as a Commodity</p>
                                    <p>Interactive Art Installation</p>
                                </div>
                            `;
                            
                            // Append the receipt at the bottom after the log area
                            const venmoTab = document.getElementById('venmo-tab');
                            venmoTab.appendChild(generatedReceipt);
                            
                            // Add the QR code to the receipt
                            if (app.qr_code_image) {
                                const qrDiv = document.getElementById('generated-app-qr');
                                const img = document.createElement("img");
                                img.src = `data:image/png;base64,${app.qr_code_image}`;
                                img.alt = "QR Code for Generated App";
                                img.style.maxWidth = "150px";
                                img.style.margin = "0 auto";
                                img.style.display = "block";
                                qrDiv.appendChild(img);
                            }
                            
                            // Play a printer sound effect if available
                            try {
                                const audio = new Audio('/static/printer.mp3');
                                audio.play().catch(e => console.log('Sound not available'));
                            } catch (e) {
                                // Sound not critical, just continue silently
                            }
                            
                            // Scroll the venmo tab to the bottom to ensure the receipt is visible
                            setTimeout(() => {
                                const venmoTab = document.getElementById('venmo-tab');
                                if (venmoTab) {
                                    venmoTab.scrollTop = venmoTab.scrollHeight;
                                    document.documentElement.scrollTop = document.documentElement.scrollHeight;
                                }
                            }, 100);
                        }
                        
                        // Also update the original manual results display for consistency
                        switchTab('manual');
                        
                        // Update the status with the generation message
                        statusDiv.textContent = `${app.message} GitHub: ${app.github_url}`;
                        
                        // Display QR code
                        qrCodeDiv.innerHTML = '';
                        if (app.qr_code_image) {
                           const img = document.createElement("img");
                           img.src = `data:image/png;base64,${app.qr_code_image}`;
                           img.alt = "QR Code for Generated App";
                           qrCodeDiv.appendChild(img);
                        }
                        
                        // Display URL
                        appUrlDiv.innerHTML = '';
                        if (app.hosted_url_full) {
                            const urlLink = document.createElement("a");
                            urlLink.href = app.hosted_url_full;
                            urlLink.textContent = app.hosted_url_full;
                            urlLink.target = "_blank";
                            appUrlDiv.appendChild(document.createTextNode("Access URL: "));
                            appUrlDiv.appendChild(urlLink);
                        }
                        
                        addLog(`App generated: ${app.app_type}`);
                        
                        // Switch back to the Venmo tab to show the receipt
                        setTimeout(() => {
                            switchTab('venmo');
                            
                            // Scroll to the bottom to ensure receipt is visible
                            const venmoTabContent = document.getElementById('venmo-tab');
                            if (venmoTabContent) {
                                venmoTabContent.scrollTop = venmoTabContent.scrollHeight;
                            }
                        }, 2000);
                    }
                }
                
            } catch (error) {
                addLog(`Error checking email status: ${error.message}`, 'error');
                console.error("Error:", error);
            }
        }
        
        // Start periodic status updates
        function startStatusUpdates() {
            // Check status every 10 seconds
            setInterval(checkEmailStatus, 10000);
        }
        
        // Function to notify the server when QR code is scanned
        async function notifyQRScanned(event) {
            try {
                // If this was triggered from a link click, don't interfere with navigation
                if (event && event.type === 'click') {
                    // Don't prevent the link from working - let it open Venmo
                    // Just notify in the background
                    setTimeout(async () => {
                        await fetch('/api/venmo-scanned');
                    }, 0);
                } else {
                    // Direct click on QR code
                    const response = await fetch('/api/venmo-scanned');
                    const result = await response.json();
                    
                    // Open Venmo in a new window
                    window.open(document.querySelector('#venmo-qr-container a').href, '_blank');
                }
                
                addLog("QR code scanned - Venmo app opening...");
                
                // Show a message to encourage entering an app description
                const instructionsReceipt = document.getElementById('instructions-receipt');
                instructionsReceipt.style.border = '2px solid #2196F3';
                
                // Make sure we're on the Venmo tab and scrolled to see instructions
                switchTab('venmo');
                setTimeout(() => {
                    const venmoTab = document.getElementById('venmo-tab');
                    if (venmoTab) {
                        venmoTab.scrollTop = venmoTab.scrollHeight;
                        document.documentElement.scrollTop = document.documentElement.scrollHeight;
                    }
                    instructionsReceipt.style.border = '1px solid #ddd';
                }, 1000);
                
            } catch (error) {
                console.error('Error notifying scan:', error);
            }
        }
        
        // Add log message to the log area
        function addLog(message, level = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry ${level}`;
            logEntry.innerHTML = `<span class="timestamp">${timestamp}</span> ${message}`;
            
            emailLog.appendChild(logEntry);
            emailLog.scrollTop = emailLog.scrollHeight; // Auto-scroll to bottom
        }
    </script>
</body>
</html>