#!/usr/bin/env python3.11
"""
Central configuration module for Vibe Coder application.
This module consolidates all application settings in one place.
"""
import os
import logging
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# --- Base Configuration ---
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "t")
PORT = int(os.getenv("PORT", "5002"))
HOST = "0.0.0.0"
EXTERNAL_HOST = os.getenv("EXTERNAL_HOST", None)  # External URL for accessing the application

# --- Path Configuration ---
# Get the absolute path of the directory containing this script
_SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
GENERATED_APPS_DIR = os.path.abspath(os.path.join(_SCRIPT_DIR, "generated_apps"))

# --- API Keys ---
GITHUB_PAT = os.getenv("GITHUB_PAT")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# --- Logging Configuration ---
LOG_LEVEL = logging.INFO if not DEBUG else logging.DEBUG
LOGGER_CONFIG = {
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "level": LOG_LEVEL,
    "handlers": [
        logging.StreamHandler()  # Add file handler here if needed
    ]
}

# --- Thermal Printer Configuration ---
PRINTER_CONFIG = {
    "vendor_id": 0x04b8,  # Epson
    "product_id": 0x0e03,  # TM-T20II
    "profiles": ["TM-T20II", "TM-T20II-42col", "default"]
}

# --- GitHub Configuration ---
GITHUB_CONFIG = {
    "username": "sandvibe",  # GitHub username for repo creation
    "repo_prefix": "vibe-coded-app-",  # Prefix for generated repositories
    "create_repo_api": "https://api.github.com/user/repos",
    "description_template": "App generated by Vibe Coder - {timestamp}"
}

# --- Email Configuration ---
EMAIL_CONFIG = {
    # Email credentials
    "email_address": os.getenv("VENMO_EMAIL_ADDRESS", "sandhaus@ik.me"),
    "email_password": os.getenv("VENMO_EMAIL_PASSWORD", ""),
    
    # IMAP Server Configuration
    "imap_server": os.getenv("VENMO_IMAP_SERVER", "mail.infomaniak.com"),
    "imap_port": int(os.getenv("VENMO_IMAP_PORT", "993")),
    "use_ssl": True,
    
    # SMTP Server Configuration (for potential future use)
    "smtp_server": os.getenv("VENMO_SMTP_SERVER", "mail.infomaniak.com"),
    "smtp_port": int(os.getenv("VENMO_SMTP_PORT", "465")),
    "smtp_use_ssl": True,
    
    # Email processing configuration
    "check_interval": int(os.getenv("EMAIL_CHECK_INTERVAL", "15")),  # seconds
    "max_emails_to_process": int(os.getenv("MAX_EMAILS_TO_PROCESS", "10")),
    "venmo_sender": os.getenv("VENMO_SENDER_EMAIL", "venmo@venmo.com"),
}

# --- Venmo Configuration ---
VENMO_CONFIG = {
    "venmo_profile_url": os.getenv("VENMO_PROFILE_URL", "https://account.venmo.com/u/haukesa"),
    # Direct URL to Venmo QR code (as provided) - this is used for the QR code generation
    "venmo_direct_url": os.getenv("VENMO_DIRECT_URL", "https://venmo.com/u/haukesa"),
    "min_amount": float(os.getenv("VENMO_MIN_AMOUNT", "0.25")),
    "max_amount": float(os.getenv("VENMO_MAX_AMOUNT", "2.00")),
    
    # Payment processing configuration
    "payment_timeout": int(os.getenv("PAYMENT_TIMEOUT", "600")),  # seconds (10 minutes)
    "allowed_payment_methods": ["Venmo"],
    
    # Server notification endpoint for when QR code is scanned
    "notify_url": os.getenv("NOTIFY_URL", "/api/venmo-scanned"),
}

# --- Session Configuration ---
SESSION_CONFIG = {
    "session_timeout": int(os.getenv("SESSION_TIMEOUT", "1800")),  # seconds (30 minutes)
    "max_active_sessions": int(os.getenv("MAX_ACTIVE_SESSIONS", "50")),
}

# --- Gemini AI Models Configuration ---
GEMINI_MODELS = {
    "pro": "gemini-2.5-pro-preview-03-25",
    "flash": "gemini-2.5-flash-preview-04-17",
    "readme": "gemini-1.5-flash-latest",
    "default": "gemini-1.5-pro-latest"
}

# --- App Tiers Configuration ---
APP_TIERS = {
    "low": {
        "min_amount": 0.0,
        "max_amount": 4.99,
        "model": GEMINI_MODELS["flash"]
    },
    "high": {
        "min_amount": 5.0,
        "max_amount": float("inf"),
        "model": GEMINI_MODELS["pro"]
    }
}

# --- Validation and Warnings ---
if not EMAIL_CONFIG["email_password"]:
    print("Warning: Email password not set in environment variables. Email monitoring will not work.")

if not GITHUB_PAT:
    print("Warning: GITHUB_PAT environment variable not set. GitHub integration will likely fail.")

if not GEMINI_API_KEY:
    print("Warning: GEMINI_API_KEY environment variable not set. App generation will fail.")

# --- Configure logging globally ---
logging.basicConfig(
    level=LOG_LEVEL,
    format=LOGGER_CONFIG["format"]
)

# --- Helper functions ---
def get_app_tier(amount: float) -> str:
    """
    Determine the app tier based on payment amount.
    
    Args:
        amount: The payment amount
        
    Returns:
        String representing the tier ('low' or 'high')
    """
    for tier, config in APP_TIERS.items():
        if config["min_amount"] <= amount <= config["max_amount"]:
            return tier
    return "low"  # Default to low tier if no match